# ~/.config/tmux/tmux.conf
# Author: [Your Name]
# Date: August 12, 2025
# Description: Tmux configuration for a Zsh-based development environment with Nord theme, Neovim integration, system monitoring, and session persistence.

# === SHELL ===
set -g default-shell /bin/zsh

# === TERMINAL COMPATIBILITY ===
set -g default-terminal "screen-256color"
set -ga terminal-overrides ",*256col*:Tc"

# === GENERAL BEHAVIOR ===
set -g set-clipboard on
set -g detach-on-destroy off
set -g escape-time 0
set -g history-limit 1000000
set -g mouse on
set -g status-interval 3
set -g allow-passthrough on

# === KEY BINDINGS ===
unbind C-b
set -g prefix C-Space
unbind r
bind r source-file ~/.config/tmux/tmux.conf \; display-message "Tmux config reloaded!"

# === WINDOW & PANE CREATION ===
unbind %
bind | split-window -h -c "#{pane_current_path}"
unbind '"'
bind - split-window -v -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# === PANE RESIZING ===
bind -r j resize-pane -D 5
bind -r k resize-pane -U 5
bind -r l resize-pane -R 5
bind -r h resize-pane -L 5
bind -r m resize-pane -Z

# === COPY MODE ===
set-window-option -g mode-keys vi
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel "xclip -selection clipboard"
bind P paste-buffer
unbind -T copy-mode-vi MouseDragEnd1Pane

# === INDEXING ===
set -g base-index 1
set -g pane-base-index 1
set -g renumber-windows on

# === PLUGINS ===
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @plugin 'hendrikmi/tmux-cpu-mem-monitor'
set -g @plugin 'tmux-plugins/tmux-battery'
# set -g @plugin 'tmux-plugins/tmux-net-speed'


# === RESURRECT SETTINGS ===
set -g @resurrect-capture-pane-contents 'on'

# === THEME & STATUS BAR ===
# Nord theme colors
bg="#3B4252"
default_fg="#D8DEE9"
session_fg="#A3BE8C"
session_selection_fg="#3B4252"
session_selection_bg="#81A1C1"
active_window_fg="#88C0D0"
active_pane_border="#abb2bf"

# Status bar settings
set -g status-left-length 200
set -g status-right-length 300
set -g status-justify centre
set -g status-style "bg=${bg}"
# Net: #(curl -s http://ipinfo.io/ip) | 
# #{battery -p}
set -g status-interval 5
# set -g status-left "#[fg=${session_fg},bold,bg=${bg}] #S #[fg=${bg},bg=${session_selection_bg}]#[fg=${session_selection_fg},bg=${session_selection_bg}] #(whoami)@#h #[fg=${session_selection_bg},bg=${bg}]#[fg=${session_fg},bg=${bg}] #(dir=$(basename \"#{pane_current_path}\"); branch=$(git -C \"#{pane_current_path}\" rev-parse --abbrev-ref HEAD 2>/dev/null || echo ''); if [ -n \"$branch\" ]; then echo \" $dir  $branch\"; else echo \" $dir\"; fi)"
set -g status-left "#[fg=${session_fg},bold,bg=${bg}] #S #[fg=${bg},bg=${session_selection_bg}]#[fg=${session_selection_fg},bg=${session_selection_bg}] #(whoami)@#h #[fg=${session_selection_bg},bg=${bg}]#[fg=${session_fg},bg=${bg}] #( 
  path=\"#{pane_current_path}\"; 
  dir=\$(basename \"\$path\"); 
  branch=\$(git -C \"\$path\" rev-parse --abbrev-ref HEAD 2>/dev/null || echo ''); 
  if [ -n \"\$branch\" ]; then 
    echo \" \$dir  \$branch\"; 
  else 
    echo \" \$dir\"; 
  fi
)"
# set -g status-right "#{net_speed}  C:#{cpu} |  M:#(/home/arif/bin/mem.sh) | 󱛟 D:#{disk} %d%b %I:%M%p B:#{battery -p} #{battery_icon_status} " 

set -g status-right "M:#(/home/arif/bin/mem.sh) | %d%b %I:%M%p | #(/home/arif/bin/battery.sh)" 
#[fg=,bg=${session_fg}]#[fg=${session_selection_fg},bg=${session_fg}] #(perc=$(cat /sys/class/power_supply/BAT0/capacity 2>/dev/null || echo 'N/A'); stat=$(cat /sys/class/power_supply/BAT0/status 2>/dev/null | tr -d '[:space:]' || echo 'Unknown'); icon=\"🔻\"; [ \"$stat\" = \"Charging\" ] && icon=\"⚡\"; [ \"$stat\" = \"Full\" ] && icon=\"🔋\"; if [ \"$perc\" = \"N/A\" ]; then echo \"N/A\"; else if [ $perc -le 20 ]; then color=\"red\"; elif [ $perc -le 50 ]; then color=\"yellow\"; else color=\"green\"; fi; bars=$(($perc / 10)); bar=\"\"; for i in $(seq 1 10); do if [ $i -le $bars ]; then bar=\"${bar}#[fg=$color]█\"; else bar=\"${bar}#[fg=grey]░\"; fi; done; echo \"#[fg=$color]${perc}% $icon ${bar}\"; fi)"
# set -g status-right 'Colors: #{battery_color_bg}bg#[default] #{battery_color_fg}fg#[default] #{battery_color_charge_bg}charge_bg#[default] #{battery_color_charge_fg}charge_fg#[default] #{battery_color_status_bg}status_bg#[default] #{battery_color_status_fg}status_fg#[default] | Graph: #{battery_graph} | Icon: #{battery_icon} | Charge Icon: #{battery_icon_charge} | Status Icon: #{battery_icon_status} | Percent: #{battery_percentage} | Remain: #{battery_remain}'
set -g status-right-length '150'
# Window status
set -g window-status-format "#[fg=${default_fg},bg=default] #I:#W "
set -g window-status-current-format "#[fg=${active_window_fg},bg=default]  #I:#W "
set -g window-status-last-style "fg=${default_fg},bg=default"

# Message and mode styling
set -g message-command-style "bg=default,fg=${default_fg}"
set -g message-style "bg=default,fg=${default_fg}"
set -g mode-style "bg=${session_selection_bg},fg=${session_selection_fg}"

# Pane borders
set -g pane-active-border-style "fg=${active_pane_border},bg=default"
set -g pane-border-style "fg=brightblack,bg=default"

# === PLUGIN INITIALIZATION ===
run '~/.tmux/plugins/tpm/tpm'

# === ADDITIONAL FEATURES (COMMENTED) ===
# Below are advanced Tmux features and customizations that can be enabled by uncommenting.
# Each feature includes a detailed explanation of its purpose and usage.

# --- Automatic Session Restore ---
# Automatically restore the last saved Tmux environment on server start.
# Useful for resuming work after a system reboot or Tmux server restart.
# Requires tmux-resurrect and tmux-continuum plugins.
# set -g @continuum-restore 'on'

# --- Session Client Indicator ---
# Show a visual indicator in the status bar if the session has attached clients.
# Green (●) if clients are attached, red (●) if not.
# Helps identify if you're in a detached session or actively viewed.
# set -g status-right "#{?session_attached,#[fg=green]●,#[fg=red]●} #[fg=${session_selection_fg},bg=${session_selection_bg}] |  #{cpu} |  #{mem} #[fg=${session_fg},bg=${session_selection_bg}]#[fg=${session_selection_fg},bg=${session_fg}] %d %b %I:%M %p #[fg=,bg=${session_fg}]#[fg=${session_selection_fg},bg=${session_fg}] #(perc=$(cat /sys/class/power_supply/BAT0/capacity 2>/dev/null || echo 'N/A'); stat=$(cat /sys/class/power_supply/BAT0/status 2>/dev/null | tr -d '[:space:]' || echo 'Unknown'); icon=\"🔻\"; [ \"$stat\" = \"Charging\" ] && icon=\"⚡\"; [ \"$stat\" = \"Full\" ] && icon=\"🔋\"; if [ \"$perc\" = \"N/A\" ]; then echo \"N/A\"; else if [ $perc -le 20 ]; then color=\"red\"; elif [ $perc -le 50 ]; then color=\"yellow\"; else color=\"green\"; fi; bars=$(($perc / 10)); bar=\"\"; for i in $(seq 1 10); do if [ $i -le $bars ]; then bar=\"${bar}#[fg=$color]█\"; else bar=\"${bar}#[fg=grey]░\"; fi; done; echo \"#[fg=$color]${perc}% $icon ${bar}\"; fi)"

# --- Prefix Highlight ---
# Use tmux-prefix-highlight plugin to show when prefix key is active.
# Useful for visual feedback when you've pressed the prefix (Ctrl+Space).
# set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
# set -g status-right "#[fg=${session_selection_fg},bg=${session_selection_bg}] #{prefix_highlight} |  #{cpu} |  #{mem} #[fg=${session_fg},bg=${session_selection_bg}]#[fg=${session_selection_fg},bg=${session_fg}] %d %b %I:%M %p #[fg=,bg=${session_fg}]#[fg=${session_selection_fg},bg=${session_fg}] #(perc=$(cat /sys/class/power_supply/BAT0/capacity 2>/dev/null || echo 'N/A'); stat=$(cat /sys/class/power_supply/BAT0/status 2>/dev/null | tr -d '[:space:]' || echo 'Unknown'); icon=\"🔻\"; [ \"$stat\" = \"Charging\" ] && icon=\"⚡\"; [ \"$stat\" = \"Full\" ] && icon=\"🔋\"; if [ \"$perc\" = \"N/A\" ]; then echo \"N/A\"; else if [ $perc -le 20 ]; then color=\"red\"; elif [ $perc -le 50 ]; then color=\"yellow\"; else color=\"green\"; fi; bars=$(($perc / 10)); bar=\"\"; for i in $(seq 1 10); do if [ $i -le $bars ]; then bar=\"${bar}#[fg=$color]█\"; else bar=\"${bar}#[fg=grey]░\"; fi; done; echo \"#[fg=$color]${perc}% $icon ${bar}\"; fi)"
# set -g @prefix_highlight_show_copy_mode 'on'
# set -g @prefix_highlight_copy_mode_attr 'fg=black,bg=yellow,bold'
# set -g @prefix_highlight_prefix_prompt 'Prefix'
# set -g @prefix_highlight_copy_prompt 'Copy'

# --- Pane Synchronization ---
# Synchronize input across all panes in the current window.
# Useful for running the same command in multiple panes (e.g., monitoring logs).
# Enable with Prefix + y, disable with Prefix + u.
# bind y setw synchronize-panes on \; display-message 'Sync panes ON'
# bind u setw synchronize-panes off \; display-message 'Sync panes OFF'

# --- Vi-style Pane Switching (No Prefix) ---
# Switch panes using Alt + hjkl without needing the prefix key.
# Requires terminal support for Alt key combinations.
# Improves navigation speed, especially with vim-tmux-navigator.
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R

# --- Advanced Copy Mode Enhancements ---
# Additional Vi-style bindings for copy mode.
# Capital Y copies from cursor to end of line, similar to Vim's Y.
bind-key -T copy-mode-vi 'Y' send-keys -X copy-end-of-line
# Rectangle selection (block selection) in copy mode, like Vim's Ctrl+v.
bind-key -T copy-mode-vi 'C-v' send-keys -X rectangle-toggle

# --- Session Management ---
# Quick shortcuts for creating and switching sessions.
# Prefix + C: Create a new named session.
# Prefix + S: Display a list to choose sessions.
# bind C command-prompt -p "New session name:" "new-session -s '%%'"
# bind S choose-session

# --- Window and Pane Renaming ---
# Rename windows or select panes by index easily.
# Prefix + ,: Rename the current window with a prompt.
# Prefix + R: Select a pane by its index.
# bind , command-prompt -I "#W" "rename-window '%%'"
# bind R command-prompt -I "#{pane_index}" "select-pane -t :.%%"

# --- Advanced Status Bar ---
# Add network status or custom scripts to the status bar.
# Example: Show network speed (requires external script or plugin).
# set -g status-right "#[fg=${session_selection_fg},bg=${session_selection_bg}] Net: #(curl -s http://ipinfo.io/ip) |  #{cpu} |  #{mem} #[fg=${session_fg},bg=${session_selection_bg}]#[fg=${session_selection_fg},bg=${session_fg}] %d %b %I:%M %p #[fg=,bg=${session_fg}]#[fg=${session_selection_fg},bg=${session_fg}] #(perc=$(cat /sys/class/power_supply/BAT0/capacity 2>/dev/null || echo 'N/A'); stat=$(cat /sys/class/power_supply/BAT0/status 2>/dev/null | tr -d '[:space:]' || echo 'Unknown'); icon=\"🔻\"; [ \"$stat\" = \"Charging\" ] && icon=\"⚡\"; [ \"$stat\" = \"Full\" ] && icon=\"🔋\"; if [ \"$perc\" = \"N/A\" ]; then echo \"N/A\"; else if [ $perc -le 20 ]; then color=\"red\"; elif [ $perc -le 50 ]; then color=\"yellow\"; else color=\"green\"; fi; bars=$(($perc / 10)); bar=\"\"; for i in $(seq 1 10); do if [ $i -le $bars ]; then bar=\"${bar}#[fg=$color]█\"; else bar=\"${bar}#[fg=grey]░\"; fi; done; echo \"#[fg=$color]${perc}% $icon ${bar}\"; fi)"

# --- Focus Events ---
# Enable focus events for applications inside Tmux.
# Useful for plugins or applications that need to know when a pane gains/loses focus.
set -g focus-events on

# --- Aggressive Window Resizing ---
# Resize windows to the size of the smallest client viewing them.
# Useful in multi-client setups to prevent content from being cut off.
# set -g aggressive-resize on

# --- Buffer Management ---
# Increase the number of copy buffers Tmux keeps.
# Default is 20; increase for more history of copied text.
# set -g buffer-limit 50

# --- Status Line Editing ---
# Use Vi key bindings when editing the status line (e.g., in command prompts).
# set -g status-keys vi

# --- Display Time for Messages ---
# Set how long (in milliseconds) Tmux messages are displayed.
# Default is 750ms; increase for better readability of notifications.
# set -g display-time 4000

# --- Repeat Time for Key Bindings ---
# Set the time (in milliseconds) Tmux waits for repeatable key bindings.
# Affects bindings with -r flag (e.g., pane resizing).
# set -g repeat-time 500

# --- macOS Clipboard Integration ---
# If on macOS, use pbcopy/pbpaste for clipboard integration.
# Replace the copy-pipe-and-cancel command in copy mode.
# bind -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel "pbcopy"

# --- Wayland Clipboard Integration ---
# If on Wayland, use wl-copy for clipboard integration.
# Replace the copy-pipe-and-cancel command in copy mode.
# bind -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel "wl-copy"

# --- Custom Status Bar Script ---
# Example of a custom script for dynamic status bar content.
# Create a script (e.g., ~/bin/tmux-status.sh) and reference it.
# set -g status-right "#[fg=${session_selection_fg},bg=${session_selection_bg}] #(~/bin/tmux-status.sh) |  #{cpu} |  #{mem} #[fg=${session_fg},bg=${session_selection_bg}]#[fg=${session_selection_fg},bg=${session_fg}] %d %b %I:%M %p #[fg=,bg=${session_fg}]#[fg=${session_selection_fg},bg=${session_fg}] #(perc=$(cat /sys/class/power_supply/BAT0/capacity 2>/dev/null || echo 'N/A'); stat=$(cat /sys/class/power_supply/BAT0/status 2>/dev/null | tr -d '[:space:]' || echo 'Unknown'); icon=\"🔻\"; [ \"$stat\" = \"Charging\" ] && icon=\"⚡\"; [ \"$stat\" = \"Full\" ] && icon=\"🔋\"; if [ \"$perc\" = \"N/A\" ]; then echo \"N/A\"; else if [ $perc -le 20 ]; then color=\"red\"; elif [ $perc -le 50 ]; then color=\"yellow\"; else color=\"green\"; fi; bars=$(($perc / 10)); bar=\"\"; for i in $(seq 1 10); do if [ $i -le $bars ]; then bar=\"${bar}#[fg=$color]█\"; else bar=\"${bar}#[fg=grey]░\"; fi; done; echo \"#[fg=$color]${perc}% $icon ${bar}\"; fi)"

# --- Tmux Logging ---
# Use tmux-logging plugin for saving pane output to files.
# Requires installation of the plugin.
# set -g @plugin 'tmux-plugins/tmux-logging'
# bind-key H pipe-pane -o "cat >>~/tmux-#W.log" \; display-message "Started logging to ~/tmux-#W.log"
# bind-key h pipe-pane \; display-message "Stopped logging"

# --- Tmux Yank ---
# Use tmux-yank for advanced clipboard management.
# Allows copying to system clipboard without external tools.
# set -g @plugin 'tmux-plugins/tmux-yank'
# set -g @yank_selection 'clipboard' # Copy to system clipboard
# set -g @yank_selection_mouse 'clipboard' # Mouse selection to clipboard

# --- Tmux Open ---
# Open selected text (e.g., URLs, file paths) with a keybinding.
# Requires tmux-open plugin.
# set -g @plugin 'tmux-plugins/tmux-open'
# bind-key -T copy-mode-vi 'o' send-keys -X copy-pipe-and-cancel "xdg-open"

# --- Advanced Battery Status ---
# Use tmux-battery plugin for more detailed battery information.
# Already included in active plugins; these are additional configurations.
# set -g @batt_icon_charge_tier8 '🌕' # Full battery
# set -g @batt_icon_charge_tier7 '🌖'
# set -g @batt_icon_charge_tier6 '🌖'
# set -g @batt_icon_charge_tier5 '🌗'
# set -g @batt_icon_charge_tier4 '🌗'
# set -g @batt_icon_charge_tier3 '🌘'
# set -g @batt_icon_charge_tier2 '🌘'
# set -g @batt_icon_charge_tier1 '🌑' # Low battery
# set -g @batt_icon_status_charging '⚡'
# set -g @batt_icon_status_discharging '🔋'

# --- Session Wizard ---
# Use tmux-session-wizard for advanced session management.
# Provides an interactive session switcher.
set -g @plugin '27medkamal/tmux-session-wizard'
bind T run-shell 'tmux-session-wizard'

# --- Tmux Sidebar ---
# Add a sidebar for notes or file exploration.
# Requires tmux-sidebar plugin.
set -g @plugin 'tmux-plugins/tmux-sidebar'
bind-key B run-shell 'tmux-sidebar'

# --- Tmux URL View ---
# Scan and open URLs from the current pane.
# Requires tmux-urlview plugin.
set -g @plugin 'tmux-plugins/tmux-urlview'
bind-key u run-shell 'tmux-urlview'

# --- Mouse Scroll Speed ---
# Adjust mouse scroll speed for smoother navigation.
# Increase for faster scrolling, decrease for finer control.
# set -g @scroll-speed-num-lines-per-scroll 3

# --- Custom Key Table ---
# Create a custom key table for specific workflows.
# Example: Toggle a key table for quick commands.
# bind-key -T root C-t switch-client -T custom
# bind-key -T custom t switch-client -T root
# bind-key -T custom c new-window -c "#{pane_current_path}"

# --- Save Pane History ---
# Save the entire pane history to a file.
# Useful for logging long sessions.
# bind-key H command-prompt -p "Save history to:" "capture-pane -S -; save-buffer %1"

# --- Reload Environment Variables ---
# Reload environment variables without restarting Tmux.
# Useful when environment changes (e.g., after editing .bashrc).
bind-key E run-shell "tmux source-file /etc/tmux.conf; tmux source-file ~/.tmux.conf"

# --- Tmux Menu ---
# Use tmux-menu plugin for interactive context menus.
set -g @plugin 'jaclu/tmux-menus'
bind-key M run-shell 'tmux-menus'

# --- Notes ---
# - Install new plugins with `Prefix + I` (Shift + I).
# - Update plugins with `Prefix + U` (Shift + U).
# - Remove plugins with `Prefix + Alt + U` after removing from @plugin list.
# - Ensure Nerd Fonts are installed for icons (e.g., , , ).
# - On macOS, disable Ctrl+Space input source switching in System Settings > Keyboard Shortcuts.
# - Reload config with `Prefix + r` or detach/reattach client to apply changes. - If battery status doesn't appear, check `upower` installation and battery device name (`upower -e`).
